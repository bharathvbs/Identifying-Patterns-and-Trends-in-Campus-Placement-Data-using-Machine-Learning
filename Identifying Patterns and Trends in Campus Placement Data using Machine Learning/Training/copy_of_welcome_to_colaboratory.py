# -*- coding: utf-8 -*-
"""copy-of-welcome-to-colaboratory.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/gist/bharathvbs/514c812c162ad478b59e3d6357382145/copy-of-welcome-to-colaboratory.ipynb
"""

import numpy as np
import pandas as pd
import os

import seaborn as sns
import matplotlib.pyplot as plt
from sklearn import svm
from sklearn.metrics import accuracy_score
from sklearn.neighbors import KNeighborsClassifier
from sklearn import metrics
from sklearn.model_selection import cross_val_score
from sklearn import preprocessing
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
import joblib
from sklearn.metrics import accuracy_score

from google.colab import drive
drive.mount('/content/drive')

df = pd.read_csv(r"/content/drive/MyDrive/Dataset/collegePlace.csv")
df.head()

df.info()

df.isnull().sum()

def transformationplot(feature):
  plt.figure(figsize=(12,5))
  plt.subplot(1,2,1)
  sns.displot(feature)
transformationplot(np.log(df['Age']))

df = df.replace(['Male'], [0]) 
df = df.replace(['Female'], [1])

df = df.replace(['Computer Science', 'Information Technology','Electronics And Communication','Mechanical','Electrical','Civil'],
                [0,1,2,3,4,5])

df = df.drop(['Hostel'], axis=1)

df

plt.figure(figsize=(12,5))
plt.subplot(121)
sns.distplot(df['CGPA'],color='r')

plt.figure(figsize=(12,5))
plt.subplot(121)
sns.displot(df['PlacedOrNot'],color='r')

df.describe()

df['Gender'].value_counts()

plt.figure(figsize = (10,6), dpi = 100)
color_palette = sns.color_palette("BuGn_r")
sns.countplot(x = "PlacedOrNot", data = df)
plt.show()

df['Stream'].value_counts()

X = df.drop(columns = 'PlacedOrNot', axis=1)
Y = df['PlacedOrNot']

import joblib
joblib.dump(X,'Placement')

print(X)

scaler = StandardScaler()

scaler.fit(X)

plt.figure(figsize=(20,5))
plt.subplot(131)
sns.violinplot(data=df, x='PlacedOrNot', y='PlacedOrNot', hue= 'CGPA')

sns.barplot(x=df.PlacedOrNot, y=df.PlacedOrNot, hue=df.Stream)

from sklearn.model_selection import train_test_split

from numpy.random.mtrand import random
X_trale, X_test, Y_trale, Y_test = train_test_split(X,Y, test_size = 0.2, stratify=Y, random_state=2)

print(X.shape, X_trale.shape, X_test.shape)

classifier = svm.SVC(kernel='linear')

classifier.fit(X_trale, Y_trale)

X_train_prediction = classifier.predict(X_trale)
training_data_accuracy = accuracy_score(X_train_prediction, Y_trale)

print('Accuracy score of the training data :', training_data_accuracy)

best_k = {"Regular":0} 
best_score = {"Regular":0}
for k in range(3, 50, 2):

    ## Using Regular training set 
    knn_temp = KNeighborsClassifier(n_neighbors=k)            # Instrantiate the model
    knn_temp.fit(X_trale, Y_trale)                            # Fit the model to the training set
    knn_temp_pred = knn_temp.predict(X_test)                  # Predict on the test set
    score = metrics.accuracy_score (Y_test, knn_temp_pred)    # Get accuracy
    if score >= best_score["Regular"] and score < 100:        # Store best params
      best_score["Regular"] = score
      best_k["Regular"] = k


print("---Results---\nk: {}\nScore: {}".format(best_k, best_score))
## Instantiate the models
knn = KNeighborsClassifier(n_neighbors=best_k["Regular"])
## Fit the model to the training set
knn.fit(X_trale, Y_trale)
knn_pred = knn.predict(X_test) 
testd = accuracy_score(knn_pred, Y_test)

import tensorflow as tf 
from tensorflow import keras
from keras.models import Sequential
from tensorflow.keras import layers

from keras.api._v2.keras import activations
classifier = Sequential()
classifier.add(keras.layers.Dense(6,activation = 'relu', input_dim=6))
classifier.add(keras.layers.Dropout (0.50))
classifier.add(keras.layers.Dense(6,activation = 'relu'))
classifier.add(keras.layers.Dropout(0.50))

classifier.add(keras.layers.Dense(1, activation = 'sigmoid'))

loss_1 = tf. keras.losses.BinaryFocalCrossentropy()

classifier.compile(optimizer = 'Adam', loss = loss_1 , metrics = ['accuracy'])

classifier.fit(X_trale, Y_trale, batch_size = 20, epochs = 100)

import pickle

pickle.dump(knn,open("placement.pkl",'wb'))
model = pickle.load(open('placement.pkl', 'rb'))